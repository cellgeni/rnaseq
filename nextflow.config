/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *          RNAseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {
  outdir = './results'
  reportdir = './reports'
  genomes_base = "/nfs/cellgeni/genomes"
  clusterOptions = false
}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  farm3 {
    includeConfig 'conf/base.config'
    includeConfig 'conf/genomes.config'
    includeConfig 'conf/lsf.config'
  }
  lsf_soloconda {
    includeConfig 'conf/base.config'
    includeConfig 'conf/genomes.config'
    includeConfig 'conf/soloconda.config'
    includeConfig 'conf/lsf.config'
  }
  lsf_monoconda {
    includeConfig 'conf/base.config'
    includeConfig 'conf/genomes.config'
    includeConfig 'conf/monoconda.config'
    includeConfig 'conf/lsf.config'
  }
  k8s {
    includeConfig 'conf/base.config'
    includeConfig 'conf/genomes.config'
    includeConfig 'conf/images.config'
    includeConfig 'conf/k8s.config'
  }
  lsf_singularity {
    includeConfig 'conf/base.config'
    includeConfig 'conf/genomes.config'
    includeConfig 'conf/lsf.config'
    includeConfig 'conf/images.config'
    includeConfig 'conf/singularity.config'
  }
  aws {
    includeConfig 'conf/base.config'
    includeConfig 'conf/aws.config'
    includeConfig 'conf/genomes.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  overwrite = true
  file = "${params.reportdir}/timeline.html"
}
trace {
  enabled = true
  overwrite = true
  file = "${params.reportdir}/trace.txt"
}
report {
  enabled = true
  overwrite = true
  file = "${params.reportdir}/report.html"
}

manifest {
  homePage = 'https://github.com/cellgeni/rnaseq-noqc'
  description = 'Nextflow bulk RNAseq analysis pipeline, used at the Cellular Genetics programme at the Wellcome Sanger Institute.'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
