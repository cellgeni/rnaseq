/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */


process {

  cpus   =  1
  memory =  4.GB
  time   =  12.h              // 140: run time exceeded. We set it to the normal queue maximum.
                              // 130: memory limit exceeded.

  maxRetries = 2
  maxErrors = '-1'
  errorStrategy = 'ignore'

  // Process-specific resource requirements
  withName: irods {
    errorStrategy = 'ignore'
    memory = 2.GB
    maxForks = 20
  }
  withName: crams_to_fastq {
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    cpus =   {  2 * 2 * Math.min(2, task.attempt) }
    memory = {  4.GB + 8.GB * (task.attempt-1) }
  }
  withName: get_fastq_files_from_bam {
    cpus =   4
    memory = 8.GB
  }
  withName: star {
    errorStrategy = { task.exitStatus == 130 ? 'retry' : 'ignore' }
    cpus = {  8 * Math.min(2, task.attempt) }
        // Note below grows to about 100GB on 2 retries.
    memory = {  40.GB * task.attempt * 1.6 ** (task.attempt - 1) }
  }
  withName: featureCounts {
    errorStrategy = 'retry'
    cpus = {  2 * task.attempt }
    memory = { 4.GB + 6.GB * (task.attempt-1) }
  }

  withLabel: merge_feature {
    errorStrategy = { task.exitStatus == 130 ? 'retry' : 'ignore' }
    cpus = {  2 ** Math.min(3, task.attempt) }
    memory = {  8.GB * task.attempt }
  }

  withName: fastqc {
    cpus = {  1 * task.attempt }
    memory = {  4.GB * task.attempt }
  }
  withName: mixcr {
    cpus   =  { 4 * task.attempt }
    memory =  { 10.GB * task.attempt }
  }
  withName: tracer_assemble {
    cpus   =  2
    memory =  { 10.GB * task.attempt }
  }
  withName: tracer_summarise {
    queue  =  'long'
    cpus   =  8
    memory =  { 30.GB * task.attempt }
  }
  withName: multiqc {
    errorStrategy = { task.exitStatus == 130 ? 'retry' : 'ignore' }
    cpus = {  1 * task.attempt }
    memory = {  8.GB * task.attempt }
  }
  withName: mapsummary {
    errorStrategy = 'ignore' 
    cpus = 1
    memory = 1.GB
  }
  withName: indexbam {
    errorStrategy = { task.exitStatus == 130 ? 'retry' : 'ignore' }
    cpus = 1
    memory = { 2.GB + 6.GB * (task.attempt - 1) }
  }
  withName: lostcause {
    errorStrategy = 'ignore' 
    cpus = 1
    memory = 1.GB
  }
  withName: workflow_manifest {
    errorStrategy = 'ignore' 
    cpus = 1
    memory = 1.GB
  }

  withName: salmon {
    cpus = {  4 * task.attempt }
    memory = {  8.GB * task.attempt }
  }
  withName: merge_salmoncounts {
    errorStrategy = { task.exitStatus == 130 ? 'retry' : 'ignore' }
    cpus = {  1 * task.attempt }
    memory = {  15.GB * task.attempt }
  }
  withName: hisat2_align {
    cpus = {  4 * task.attempt }
    memory = {  10.GB * task.attempt }
  }
  withName: hisat2_sort {
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    cpus = {  2 ** (1 + task.attempt) }
    memory = {  4.GB + 4.GB * (task.attempt-1) }
  }

  withName:makeSalmonIndex {
    cpus = 8
    memory = { 80.GB + 40.GB * (task.attempt-1) }
  }

  withName:makeSTARindex {
    cpus = 8
    memory = { 80.GB + 40.GB * (task.attempt-1) }
  }

}

params {
// Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 12.h
  REF_PATH="/lustre/scratch117/core/sciops_repository/cram_cache/%2s/%2s/%s:/lustre/scratch118/core/sciops_repository/cram_cache/%2s/%2s/%s:URL=http:://sf2-farm-srv1.internal.sanger.ac.uk::8000/%s"
  REF_CACHE="/lustre/scratch117/cellgen/cellgeni/TIC-bulkseq/.cache"
  IGDATA="/ncbi-igblast-1.7.0/bin"
}
